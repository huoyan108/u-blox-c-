SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)


set(Boost_USE_MULTITHREADED ON)
set(BOOST_MIN_VERSION "1.44.0")

find_package(Boost COMPONENTS thread system)
include_directories(${Boost_INCLUDE_DIRS})
find_package(Threads REQUIRED)
find_package(LibEvent REQUIRED)
add_definitions(-DCPPLOG_THREADING)

ADD_SUBDIRECTORY(Log)

include_directories(/usr/lib)
string( TOLOWER "${CMAKE_BUILD_TYPE}" build_type )
IF(build_type  STREQUAL debug)
	find_package(Lua REQUIRED)
	include_directories(${LUA_INCLUDE_DIR})
	add_definitions(-DWITH_LUA)
	add_definitions(-D_DEBUG)
	SET(SE_DAS_SRCS ${SE_DAS_SRCS} se_das.cpp se_log.cpp se_server.cpp se_worker.cpp se_terminaltype.cpp se_rabbitmq.cpp cetc_sc.cpp se_luautil.cpp se_event.cpp touch.cpp utils.c )
	ADD_EXECUTABLE(se_das ${SE_DAS_SRCS})

	TARGET_LINK_LIBRARIES(se_das ${CMAKE_THREAD_LIBS_INIT} ${Boost_LIBRARIES} ${EVENT_LIBRARIES} ${ZeroMQ_LIBRARIES} ${LUA_LIBRARIES} proto au dl rabbitmq)
ELSE(build_type  STREQUAL debug)
	find_package(Lua REQUIRED)
	include_directories(${LUA_INCLUDE_DIR})
	add_definitions(-DWITH_LUA)
	add_definitions(-D_DEBUG)
	SET(SE_DAS_SRCS ${SE_DAS_SRCS} se_das.cpp se_log.cpp se_server.cpp se_worker.cpp se_terminaltype.cpp se_rabbitmq.cpp cetc_sc.cpp se_luautil.cpp se_event.cpp touch.cpp utils.c)
	ADD_EXECUTABLE(se_das ${SE_DAS_SRCS})
	TARGET_LINK_LIBRARIES(se_das ${CMAKE_THREAD_LIBS_INIT} ${Boost_LIBRARIES} ${EVENT_LIBRARIES} ${ZeroMQ_LIBRARIES} ${LUA_LIBRARIES} proto au dl rabbitmq)
ENDIF(build_type  STREQUAL debug)


INSTALL(TARGETS se_das RUNTIME DESTINATION bin)
